#+TITLE: PhD Dissertation Prospectus
#+SUBTITLE: The Holy Grail of Gradual Security
#+OPTIONS: toc:nil
#+AUTHOR: Tianyu Chen
#+LATEX_CLASS_OPTIONS: [10pt]
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \PassOptionsToPackage{no-math}{fontspec}
#+LATEX_HEADER: \usepackage{mathspec}
#+LATEX_HEADER: \usepackage{libertine}
#+LATEX_HEADER: \usepackage{circledsteps}
#+LATEX_HEADER: \setallmonofonts[Scale=0.9]{Iosevka}

#+MACRO: surface $\lambda_{\mathtt{IFC}}^\star$
#+MACRO: cc $\lambda_{\mathtt{IFC}}^{c}$
#+MACRO: dynifc $\lambda_{\mathtt{SEC}}$

#+MACRO: unk $\mathtt{\star}$
#+MACRO: circ @@latex:\Circled{$1}@@

#+bibliography: all.bib

My PhD thesis:

#+BEGIN_CENTER
/{{{surface}}} satisfies both noninterference and the gradual
guarantee without sacrifices, by excluding the statically
unknown label {{{unk}}} from runtime security labels./
#+END_CENTER

In my PhD dissertation, I will introduce a gradual security-typed programming
language, {{{surface}}}, which {{{circ(1)}}} enforces information flow security
by satisfying noninterference, {{{circ(2)}}} satisfies the gradual guarantee,
{{{circ(3)}}} enjoys type-guided classification, and {{{circ(4)}}}
utilizes NSU checking to enforce implicit flows through the heap
with no static analysis required.

* What Gradual Security Is and Why It Matters

Information-flow control (IFC) ensures that information transfers
within a program adhere to a security policy, e.g., by
preventing high-security data from flowing to a low-security
channel. This adherence can be enforced statically using a type
system [cite: @volpano1996sound;@Myers:1997aa;@myers1999jflow]

However, [cite/t:@Toro:2018aa] identified

# {{{citep(volpano1996sound,Myers:1997aa,myers1999jflow)}}}
# , or
# dynamically using runtime
# monitoring~\citep{Askarov:2009vq,austin2009efficient,Devriese:2010up,stefan2011flexible,Austin:2017uh,Xiang:2021ub},
# or using static analysis to pre-compute information that facilitates runtime monitoring
# ~\citep{le2005monitoring,le2007automaton,Chandra:2007we,Shroff:2007tg,russo2010dynamic,moore2011static}.
# The static and dynamic approaches have complementary strengths and weaknesses; the dynamic
# approach requires less effort from the programmer while the static
# approach provides stronger guarantees and less runtime overhead.

# {{{surface}}} is /secure/, because its type system and its runtime work
# together and ensure an information-flow policy that the output of running
# a well-typed {{{surface}}} program does not leak information about its
# sensitive, high-security user input.
# The language is /gradual/, because it gives programmers the choice
# between enforcing the aforementioned security policy statically,
# when the program type-checks, or dynamically, when the program
# executes. Due to the sensitive nature of information-flow control,
# there is strong desire to machine-check (mechanize) the proofs.
# Agda is a proof assistant based on a variant of Martin-LÃ¶f type theory
# (MLTT), which ensures that all proofs are indeed correct.

* Key Insights and Technical Contributions

In more detail, I keep two major properties in mind when I design
and reason about {{{surface}}}, namely, /noninterference/ and
the /gradual guarantee/. In the setting of a
functional programming language, noninterference says that a potentially
malicious party cannot infer high-security user inputs by
observing the evaluation results for multiple executions
of the same program written in that language. As mentioned above,
in {{{surface}}}, a programmer may opt for delaying part of
the enforcement of noninterference from compile-time to runtime.
In practice, this is done by leaving out some security-level labels on
type annotations as /statically unknown/.
The /gradual guarantee/ says that even after changing some security labels
to be statically unknown, a well-typed program will still be well-typed
and a successfully running (value-producing) program will continue to do so.
If the programmer goes the other direction and replaces some unknown
labels with concrete labels, ~low~ or ~high~, the program may produce a
compile-time error or a trapped runtime error, because some of
the annotations supplied by the programmer may contain mistakes.

* Dissertation Timeline

I have already finished the language design of {{{surface}}}, including its
syntax, its type system, and its semantics. I have proved that {{{surface}}}
indeed satisfies its security guarantee, noninterference. As a byproduct,
I also proved type safety for {{{surface}}}. All these proofs have been
mechanized in Agda. Right now I am working on a proof of
the gradual guarantee. When the gradual guarantee proof is in place,
I will be able to conclude my thesis work.
